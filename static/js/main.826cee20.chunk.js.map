{"version":3,"sources":["index.js"],"names":["Square","className","this","props","isWin","onClick","value","React","Component","Board","i","winning","j","winningSquares","length","squares","rows","cloumns","push","renderSquare","Game","state","history","Array","fill","index","xIsNext","stepNumber","indexClick","isHistorySort","indexHistoryClick","slice","calculateWinner","setState","concat","step","status","current","winner","WinningSqures","moves","map","move","desc","getIndex","cloumnIndex","rowIndex","jumpTo","style","background","reverse","console","log","indexOf","handleClick","sortHistory","Math","floor","listIndexWin","count","left","currentIndex","right","count2","above","bellow","count3","diagonalline1Above","diagonalline1Bellow","count4","diagonalline2Above","diagonalline2Bellow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.826cee20.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n        return (\r\n            <button\r\n                className={\"square \" + (this.props.isWin ? \"squareWin\" : null)}\r\n                onClick={() => this.props.onClick()}\r\n            >\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        let winning = false; \r\n        for(let j = 0; j < this.props.winningSquares.length; j++){\r\n            if(this.props.winningSquares[j] === i){\r\n                winning = true; \r\n            }\r\n        }\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                isWin={winning}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let width = 20;\r\n        let height = 20;\r\n        let rows = [];\r\n        for (let i = 0; i < height; i++) {\r\n            let cloumns = [];\r\n            for (let j = i * width; j < width * (i + 1); j++) {\r\n                cloumns.push(\r\n                    this.renderSquare(j)\r\n                );\r\n            }\r\n            rows.push(\r\n                <div className=\"board-row\">\r\n                    {cloumns}\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(400).fill(null),\r\n                index : Array(400).fill(null)\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            indexClick: 0,\r\n            isHistorySort : true,\r\n            indexHistoryClick : -1,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares, this.state.indexClick) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                index : i\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            indexClick: i,\r\n        });\r\n\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            indexHistoryClick : step,\r\n        });\r\n    }\r\n\r\n    sortHistory(){\r\n        this.setState({isHistorySort : !this.state.isHistorySort});\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares, this.state.indexClick);\r\n        let WinningSqures = []; \r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move  + \"(\" + getIndex(step.index).cloumnIndex + \",\" + getIndex(step.index).rowIndex + \")\" :\r\n                'Go to game start';\r\n            if(move === this.state.indexHistoryClick){\r\n                return (\r\n                    <li>\r\n                        <button onClick={() => this.jumpTo(move)}\r\n                        style={{background : \"red\"}}\r\n                        >{desc}</button>\r\n                    </li>\r\n                );\r\n            }else{\r\n                return (\r\n                    <li>\r\n                        <button onClick={() => this.jumpTo(move)}\r\n                        >{desc}</button>\r\n                    </li>\r\n                );\r\n            }\r\n        });\r\n\r\n\r\n        if(!this.state.isHistorySort){\r\n            moves.reverse(); \r\n        }\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner.winner;\r\n            WinningSqures = winner.winningSquares;\r\n            console.log(WinningSqures);  \r\n        } else {\r\n            if(winner === null){\r\n                if(current.squares.indexOf(null) === -1){\r\n                    status = 'Being a draw';\r\n                }else{\r\n                    status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        winningSquares={WinningSqures}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <button onClick = {() => this.sortHistory()}>{this.state.isHistorySort ? \"Tăng dần\" : \"Giảm dần\"}</button>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares, index) {\r\n    //Vi tri cua click\r\n    let cloumnIndex = index % 20;\r\n    let rowIndex = Math.floor(index / 20);\r\n    let listIndexWin = [];\r\n    listIndexWin.push(index);\r\n    //Ngang ben trai\r\n    let count = 0;\r\n    let left = cloumnIndex - 1;\r\n    let currentIndex = index - 1;\r\n    while (left >= 0) {\r\n        if (squares[index] === squares[currentIndex]) {\r\n            ++count;\r\n            listIndexWin.push(currentIndex);\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n        left--;\r\n        currentIndex--;\r\n    }\r\n    let right = (rowIndex + 1) * 20 - 1;\r\n    //Ngang ben phai\r\n    currentIndex = index + 1;\r\n    while (currentIndex <= right) {\r\n        if (squares[index] === squares[currentIndex]) {\r\n            ++count;\r\n            listIndexWin.push(currentIndex);\r\n        } else {\r\n            break;\r\n        }\r\n        currentIndex++;\r\n    }\r\n\r\n    if (count === 4) {\r\n        return {\r\n            winner: squares[index],\r\n            winningSquares: listIndexWin\r\n        }\r\n    }\r\n\r\n\r\n    let count2 = 0;\r\n    listIndexWin = [];\r\n    listIndexWin.push(index); \r\n    //Doc ben tren \r\n    let above = index - 20;\r\n    while (above >= 0) {\r\n        if (squares[above] === squares[index]) {\r\n            count2++;\r\n            listIndexWin.push(above);\r\n        } else {\r\n            break;\r\n        }\r\n        above = above - 20;\r\n    }\r\n    //Doc ben duoi\r\n    let bellow = index + 20;\r\n    while (bellow <= 399) {\r\n        if (squares[bellow] === squares[index]) {\r\n            count2++;\r\n            listIndexWin.push(bellow);\r\n        } else {\r\n            break;\r\n        }\r\n        bellow = bellow + 20;\r\n    }\r\n\r\n    if (count2 === 4) {\r\n        return {\r\n            winner: squares[index],\r\n            winningSquares: listIndexWin\r\n        }\r\n    }\r\n\r\n\r\n    let count3 = 0;\r\n    listIndexWin = []; \r\n    listIndexWin.push(index); \r\n    //Cheo 1 ben tren \r\n    let diagonalline1Above = (index - 20) - 1;\r\n    while (diagonalline1Above >= 0) {\r\n        if (squares[diagonalline1Above] === squares[index]) {\r\n            count3++;\r\n            listIndexWin.push(diagonalline1Above);\r\n        } else {\r\n            break;\r\n        }\r\n        diagonalline1Above = (diagonalline1Above - 20) - 1;\r\n    }\r\n    //Cheo 1 ben duoi\r\n    let diagonalline1Bellow = (index + 20) + 1;\r\n    while (diagonalline1Bellow <= 399) {\r\n        if (squares[diagonalline1Bellow] === squares[index]) {\r\n            count3++;\r\n            listIndexWin.push(diagonalline1Bellow); \r\n        } else {\r\n            break;\r\n        }\r\n        diagonalline1Bellow = (diagonalline1Bellow + 20) + 1;\r\n    }\r\n\r\n    if (count3 === 4) {\r\n        return {\r\n            winner: squares[index],\r\n            winningSquares: listIndexWin\r\n        }\r\n    }\r\n\r\n\r\n    let count4 = 0;\r\n    listIndexWin = []; \r\n    listIndexWin.push(index); \r\n    //Cheo 2 ben tren \r\n    let diagonalline2Above = (index - 20) + 1;\r\n    while (diagonalline2Above > 0) {\r\n        if (squares[diagonalline2Above] === squares[index]) {\r\n            count4++;\r\n            listIndexWin.push(diagonalline2Above);\r\n        } else {\r\n            break;\r\n        }\r\n        diagonalline2Above = (diagonalline2Above - 20) + 1;\r\n    }\r\n\r\n    //Cheo 2 ben duoi \r\n    let diagonalline2Bellow = (index + 20) - 1;\r\n    while (diagonalline2Bellow < 399) {\r\n        if (squares[diagonalline2Bellow] === squares[index]) {\r\n            count4++;\r\n            listIndexWin.push(diagonalline2Bellow); \r\n        } else {\r\n            break;\r\n        }\r\n        diagonalline2Bellow = (diagonalline2Bellow + 20) - 1;\r\n    }\r\n\r\n\r\n    if (count4 === 4) {\r\n        return {\r\n            winner: squares[index],\r\n            winningSquares: listIndexWin\r\n        }\r\n    }\r\n\r\n\r\n    return null;\r\n}\r\n\r\nfunction getIndex(index){\r\n    let cloumnIndex = index % 20;\r\n    let rowIndex = Math.floor(index / 20);\r\n    return {\r\n        cloumnIndex,\r\n        rowIndex\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}